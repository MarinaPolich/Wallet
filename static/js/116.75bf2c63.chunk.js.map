{"version":3,"file":"static/js/116.75bf2c63.chunk.js","mappings":"0NAMaA,EAAmB,WAC9B,IAAMC,GAAWC,EAAAA,EAAAA,MAKXC,EAAqBC,EAAAA,KAAaC,MAAM,CAC5CC,MAAOF,EAAAA,KAAaE,QAAQC,SAAS,aACtCC,SAAUJ,EAAAA,KACPK,IAAI,EAAG,sCACPC,IAAI,GAAI,wCACRH,SAAS,YACZI,SAAUP,EAAAA,KAAaG,SAAS,YAC7BE,IAAI,EAAG,cACNC,IAAI,GAAI,aACXE,QAASR,EAAAA,KACAG,SAAS,aACTM,MACC,CAACT,EAAAA,GAAQ,YAAa,MACtB,+CAGZ,OACE,SAAC,KAAD,CACEU,cAAe,CAAER,MAAO,GAAIE,SAAU,GAAII,QAAS,GAAID,SAAU,IACjEI,iBAAkBZ,EAClBa,SAxBiB,SAAC,EAAD,GAAmD,IAAhDV,EAA+C,EAA/CA,MAAOE,EAAwC,EAAxCA,SAAUG,EAA8B,EAA9BA,SAAcM,EAAgB,EAAhBA,UACrDhB,GAASiB,EAAAA,EAAAA,IAAa,CAAEZ,MAAAA,EAAOE,SAAAA,EAAUG,SAAAA,KACzCM,GACD,EAkBC,SAKG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,OAAQC,EAAvC,EAAuCA,OAAQC,EAA/C,EAA+CA,QAA/C,OACC,kBAAMP,SAAUG,EAAhB,UACG,KACD,6BACG,KACD,kBACEK,KAAK,QACLC,KAAK,QACLC,MAAOL,EAAOf,MACdqB,SAAUP,EACVQ,YAAY,WACX,OAEDN,EAAOhB,OAASiB,EAAQjB,OAAW,yBAAMgB,EAAOhB,QAAgB,MACpE,6BACG,KACD,kBACEkB,KAAK,WACLC,KAAK,WACLC,MAAOL,EAAOb,SACdmB,SAAUP,EACVQ,YAAY,gBAGZN,EAAOd,UAAYe,EAAQf,UAAc,yBAAMc,EAAOd,WAAmB,MAC7E,6BACG,KACD,kBACEgB,KAAK,WACLC,KAAK,UACLC,MAAOL,EAAOT,QACde,SAAUP,EACVQ,YAAY,wBAGZN,EAAOV,SAAWW,EAAQX,SAAa,yBAAMU,EAAOV,UAAkB,MAC1E,6BACG,KACD,kBACEY,KAAK,OACLC,KAAK,WACLC,MAAOL,EAAOV,SACdgB,SAAUP,EACVQ,YAAY,mBAGZN,EAAOX,UAAYY,EAAQZ,UAAc,yBAAMW,EAAOX,WAAmB,MAC7E,mBAAQa,KAAK,SAAb,uBACA,SAAC,KAAD,CAAMK,GAAG,SAAT,sBAhDH,GAqDN,EC5ED,EATqB,WACnB,OACE,4BACE,0CACA,SAAC7B,EAAD,MAGL,C","sources":["components/RegistrationForm/RegistrationForm.jsx","pages/Registration.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport { registration } from '../../redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\nexport const RegistrationForm = () => {\n  const dispatch = useDispatch();\n  const handelSubmit = ({ email, password, username }, { resetForm }) => {\n    dispatch(registration({ email, password, username }));\n    resetForm();\n  };\n  const RegistrationSchema = Yup.object().shape({\n    email: Yup.string().email().required('*Required'),\n   password: Yup.string()\n     .min(6, 'Password is too short, at least 6!')\n     .max(12, 'Password is too long, at maximum 12!')\n     .required('Required'),\n   username: Yup.string().required('Required')\n     .min(1, 'Too Short!')\n      .max(12, 'Too Long!'),\n    confirm: Yup.string()\n            .required('*Required')\n            .oneOf(\n              [Yup.ref('password'), null],\n              'Your passwords are different, try harder!'\n            ),\n });\n  return (\n    <Formik\n      initialValues={{ email: '', password: '', confirm: '', username: '' }}\n      validationSchema={RegistrationSchema}\n      onSubmit={handelSubmit}\n    >\n      {({ handleSubmit, handleChange, values, errors, touched  }) => (\n        <form onSubmit={handleSubmit}>\n          {' '}\n          <label>\n            {' '}\n            <input\n              type=\"email\"\n              name=\"email\"\n              value={values.email}\n              onChange={handleChange}\n              placeholder=\"E-mail\"\n            />{' '}\n          </label>\n             {errors.email && touched.email ? (  <div>{errors.email}</div>) : null}\n          <label>\n            {' '}\n            <input\n              type=\"password\"\n              name=\"password\"\n              value={values.password}\n              onChange={handleChange}\n              placeholder=\"Password\"\n            />\n          </label>\n             {errors.password && touched.password ? (  <div>{errors.password}</div>) : null}\n          <label>\n            {' '}\n            <input\n              type=\"password\"\n              name=\"confirm\"\n              value={values.confirm}\n              onChange={handleChange}\n              placeholder=\"Confirm password\"\n            />\n          </label>\n             {errors.confirm && touched.confirm ? (  <div>{errors.confirm}</div>) : null}\n          <label>\n            {' '}\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={values.username}\n              onChange={handleChange}\n              placeholder=\"First name \"\n            />\n          </label>\n             {errors.username && touched.username ? (  <div>{errors.username}</div>) : null}\n          <button type=\"submit\">Register</button>\n          <Link to=\"/login\">Log In</Link>\n        </form>\n      )}\n    </Formik>\n  );\n};","import { RegistrationForm } from 'components/RegistrationForm/RegistrationForm';\n\nconst Registration = () => {\n  return (\n    <div>\n      <h1>Registration</h1>\n      <RegistrationForm />\n    </div>\n  );\n};\n\nexport default Registration;\n"],"names":["RegistrationForm","dispatch","useDispatch","RegistrationSchema","Yup","shape","email","required","password","min","max","username","confirm","oneOf","initialValues","validationSchema","onSubmit","resetForm","registration","handleSubmit","handleChange","values","errors","touched","type","name","value","onChange","placeholder","to"],"sourceRoot":""}