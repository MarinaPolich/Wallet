{"version":3,"file":"static/js/111.e48165e5.chunk.js","mappings":"0NAMaA,EAAY,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MAKXC,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,MAAOF,EAAAA,KAAaE,MAAM,iBAAiBC,SAAS,YACpDC,SAAUJ,EAAAA,KACPK,IAAI,EAAG,sCACPC,IAAI,GAAI,wCACRH,SAAS,cAEd,OACE,SAAC,KAAD,CACEI,cAAe,CAAEL,MAAO,GAAIE,SAAU,IACtCI,iBAAkBT,EAClBU,SAfiB,SAAC,EAAD,GAAyC,IAAtCP,EAAqC,EAArCA,MAAOE,EAA8B,EAA9BA,SAAcM,EAAgB,EAAhBA,UAC3Cb,GAASc,EAAAA,EAAAA,IAAM,CAAET,MAAAA,EAAOE,SAAAA,KACxBM,GACD,EASC,SAKG,gBAAGE,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,OAAQC,EAAvC,EAAuCA,OAAQC,EAA/C,EAA+CA,QAA/C,OACC,kBAAMP,SAAUG,EAAhB,WACE,4BACE,kBACEK,KAAK,QACLC,KAAK,QACLC,YAAY,SACZC,MAAON,EAAOZ,MACdmB,SAAUR,MAGbE,EAAOb,OAASc,EAAQd,OAAQ,yBAAMa,EAAOb,QAAe,MAC7D,4BACE,kBACEe,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,MAAON,EAAOV,SACdiB,SAAUR,MAGbE,EAAOX,UAAYY,EAAQZ,UAC1B,yBAAMW,EAAOX,WACX,MACJ,mBAAQa,KAAK,SAAb,qBACA,SAAC,KAAD,CAAMK,GAAG,gBAAT,wBAzBH,GA8BN,EC5CD,EATc,WACZ,OACE,4BACE,mCACA,SAAC1B,EAAD,MAGL,C","sources":["components/LoginForm/LoginForm.jsx","pages/Login.jsx"],"sourcesContent":["import React from 'react';\nimport { Formik } from 'formik';\nimport { logIn } from '../../redux/auth/auth-operations';\nimport { useDispatch } from 'react-redux';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const handelSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(logIn({ email, password }));\n    resetForm();\n  };\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Invalid email').required('Required'),\n    password: Yup.string()\n      .min(6, 'Password is too short, at least 6!')\n      .max(12, 'Password is too long, at maximum 12!')\n      .required('Required'),\n  });\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={LoginSchema}\n      onSubmit={handelSubmit}\n    >\n      {({ handleSubmit, handleChange, values, errors, touched }) => (\n        <form onSubmit={handleSubmit}>\n          <label>\n            <input\n              type=\"email\"\n              name=\"email\"\n              placeholder=\"E-mail\"\n              value={values.email}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.email && touched.email ? <div>{errors.email}</div> : null}\n          <label>\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              value={values.password}\n              onChange={handleChange}\n            />\n          </label>\n          {errors.password && touched.password ? (\n            <div>{errors.password}</div>\n          ) : null}\n          <button type=\"submit\">Log In</button>\n          <Link to=\"/registration\">Register</Link>\n        </form>\n      )}\n    </Formik>\n  );\n};\n","import { LoginForm } from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <div>\n      <h1>Login</h1>\n      <LoginForm />\n    </div>\n  );\n};\n\nexport default Login;\n"],"names":["LoginForm","dispatch","useDispatch","LoginSchema","Yup","shape","email","required","password","min","max","initialValues","validationSchema","onSubmit","resetForm","logIn","handleSubmit","handleChange","values","errors","touched","type","name","placeholder","value","onChange","to"],"sourceRoot":""}